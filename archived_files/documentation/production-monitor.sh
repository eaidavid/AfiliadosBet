#!/bin/bash

# Script de Monitoramento - AfiliadosBet Produ√ß√£o
# Execute com: ./production-monitor.sh

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o para verificar status de servi√ßo
check_service() {
    local service=$1
    local name=$2
    
    if systemctl is-active --quiet $service; then
        echo -e "${GREEN}‚úÖ $name: Ativo${NC}"
    else
        echo -e "${RED}‚ùå $name: Inativo${NC}"
    fi
}

# Fun√ß√£o para verificar porta
check_port() {
    local port=$1
    local name=$2
    
    if netstat -tuln | grep -q ":$port "; then
        echo -e "${GREEN}‚úÖ $name (porta $port): Ativo${NC}"
    else
        echo -e "${RED}‚ùå $name (porta $port): Inativo${NC}"
    fi
}

clear
echo -e "${BLUE}================================${NC}"
echo -e "${BLUE}üìä Monitor AfiliadosBet Produ√ß√£o${NC}"
echo -e "${BLUE}================================${NC}"
echo

# 1. Status dos Servi√ßos
echo -e "${YELLOW}üîß Status dos Servi√ßos:${NC}"
check_service nginx "Nginx"
check_service postgresql "PostgreSQL"
echo

# 2. Status PM2
echo -e "${YELLOW}‚ö° Status PM2:${NC}"
if command -v pm2 > /dev/null; then
    pm2 status
else
    echo -e "${RED}‚ùå PM2 n√£o instalado${NC}"
fi
echo

# 3. Status das Portas
echo -e "${YELLOW}üåê Status das Portas:${NC}"
check_port 80 "HTTP"
check_port 443 "HTTPS"
check_port 5432 "PostgreSQL"
check_port 5000 "Aplica√ß√£o"
echo

# 4. Teste de Conectividade
echo -e "${YELLOW}üîç Teste de Conectividade:${NC}"
if curl -f -s http://localhost:5000/health > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Aplica√ß√£o respondendo${NC}"
else
    echo -e "${RED}‚ùå Aplica√ß√£o n√£o responde${NC}"
fi

if curl -f -s http://localhost > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Nginx respondendo${NC}"
else
    echo -e "${RED}‚ùå Nginx n√£o responde${NC}"
fi
echo

# 5. Uso de Recursos
echo -e "${YELLOW}üíª Uso de Recursos:${NC}"
echo -e "${BLUE}CPU:${NC}"
top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1 | awk '{printf "  Uso: %.1f%%\n", $1}'

echo -e "${BLUE}Mem√≥ria:${NC}"
free -h | awk 'NR==2{printf "  Usado: %s/%s (%.1f%%)\n", $3,$2,$3*100/$2 }'

echo -e "${BLUE}Disco:${NC}"
df -h / | awk 'NR==2{printf "  Usado: %s/%s (%s)\n", $3,$2,$5}'
echo

# 6. Espa√ßo em Disco por Diret√≥rio
echo -e "${YELLOW}üíø Uso de Disco por Diret√≥rio:${NC}"
if [ -d "/var/www/afiliadosbet" ]; then
    echo -e "${BLUE}Aplica√ß√£o:${NC} $(du -sh /var/www/afiliadosbet 2>/dev/null | cut -f1)"
fi
if [ -d "/var/backups/afiliadosbet" ]; then
    echo -e "${BLUE}Backups:${NC} $(du -sh /var/backups/afiliadosbet 2>/dev/null | cut -f1)"
fi
if [ -d "/var/log" ]; then
    echo -e "${BLUE}Logs:${NC} $(du -sh /var/log 2>/dev/null | cut -f1)"
fi
echo

# 7. √öltimos Logs da Aplica√ß√£o
echo -e "${YELLOW}üìã √öltimos Logs da Aplica√ß√£o:${NC}"
if command -v pm2 > /dev/null; then
    pm2 logs afiliadosbet --lines 5 --nostream 2>/dev/null || echo "Nenhum log dispon√≠vel"
else
    echo "PM2 n√£o dispon√≠vel"
fi
echo

# 8. Estat√≠sticas do Banco
echo -e "${YELLOW}üóÑÔ∏è Estat√≠sticas do Banco:${NC}"
if systemctl is-active --quiet postgresql; then
    CONN_COUNT=$(sudo -u postgres psql -t -c "SELECT count(*) FROM pg_stat_activity;" 2>/dev/null | xargs)
    DB_SIZE=$(sudo -u postgres psql -t -c "SELECT pg_size_pretty(pg_database_size('afiliadosbet'));" 2>/dev/null | xargs)
    echo -e "${BLUE}Conex√µes ativas:${NC} $CONN_COUNT"
    echo -e "${BLUE}Tamanho do banco:${NC} $DB_SIZE"
else
    echo -e "${RED}PostgreSQL n√£o est√° rodando${NC}"
fi
echo

# 9. Informa√ß√µes de SSL
echo -e "${YELLOW}üîí Status SSL:${NC}"
if [ -f "/etc/letsencrypt/live/afiliadosbet.com/cert.pem" ]; then
    EXPIRY=$(openssl x509 -enddate -noout -in /etc/letsencrypt/live/afiliadosbet.com/cert.pem 2>/dev/null | cut -d= -f2)
    if [ -n "$EXPIRY" ]; then
        echo -e "${BLUE}Certificado expira em:${NC} $EXPIRY"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Erro ao ler certificado${NC}"
    fi
else
    echo -e "${RED}‚ùå Certificado SSL n√£o encontrado${NC}"
fi
echo

# 10. Uptime do Sistema
echo -e "${YELLOW}‚è∞ Uptime do Sistema:${NC}"
uptime
echo

# 11. Verifica√ß√£o de Atualiza√ß√µes
echo -e "${YELLOW}üì¶ Verifica√ß√£o de Atualiza√ß√µes:${NC}"
if [ -d "/var/www/afiliadosbet/.git" ]; then
    cd /var/www/afiliadosbet
    git fetch origin 2>/dev/null
    BEHIND=$(git rev-list HEAD...origin/main --count 2>/dev/null)
    if [ "$BEHIND" -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è $BEHIND atualiza√ß√µes dispon√≠veis${NC}"
    else
        echo -e "${GREEN}‚úÖ C√≥digo atualizado${NC}"
    fi
else
    echo -e "${RED}‚ùå Reposit√≥rio Git n√£o encontrado${NC}"
fi
echo

# 12. Comandos √öteis
echo -e "${YELLOW}üõ†Ô∏è Comandos √öteis:${NC}"
echo -e "${BLUE}Deploy:${NC} ./production-deploy.sh"
echo -e "${BLUE}Logs da aplica√ß√£o:${NC} pm2 logs afiliadosbet"
echo -e "${BLUE}Restart da aplica√ß√£o:${NC} pm2 restart afiliadosbet"
echo -e "${BLUE}Status detalhado:${NC} pm2 monit"
echo -e "${BLUE}Logs do Nginx:${NC} tail -f /var/log/nginx/afiliadosbet_error.log"
echo -e "${BLUE}Backup manual:${NC} ./production-backup.sh"
echo

echo -e "${GREEN}‚úÖ Monitoramento conclu√≠do em $(date)${NC}"