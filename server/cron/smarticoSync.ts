import cron from 'node-cron';
import { SmarticoFetcher } from '../services/smarticoFetcher';
import { DatabaseStorage } from '../storage';

export class SmarticoSyncScheduler {
  private fetcher: SmarticoFetcher;
  private isRunning = false;

  constructor(storage: DatabaseStorage) {
    this.fetcher = new SmarticoFetcher(storage);
  }

  start(): void {
    console.log('üìÖ Iniciando agendador Smartico - execu√ß√£o a cada 30 minutos');
    
    // Executar a cada 30 minutos
    cron.schedule('*/30 * * * *', async () => {
      if (this.isRunning) {
        console.log('‚è∏Ô∏è Sincroniza√ß√£o j√° em andamento, pulando execu√ß√£o');
        return;
      }

      this.isRunning = true;
      console.log('üöÄ Executando sincroniza√ß√£o agendada do Smartico');
      
      try {
        await this.fetcher.syncAllHouses();
        console.log('‚úÖ Sincroniza√ß√£o agendada conclu√≠da com sucesso');
      } catch (error) {
        console.error('‚ùå Erro na sincroniza√ß√£o agendada:', error);
      } finally {
        this.isRunning = false;
      }
    }, {
      scheduled: true,
      timezone: "America/Sao_Paulo"
    });

    console.log('‚úÖ Agendador configurado: execu√ß√£o a cada 30 minutos');
  }

  // M√©todo para executar sincroniza√ß√£o manual
  async runManualSync(): Promise<void> {
    if (this.isRunning) {
      throw new Error('Sincroniza√ß√£o j√° em andamento');
    }

    this.isRunning = true;
    console.log('üîÑ Executando sincroniza√ß√£o manual do Smartico');
    
    try {
      await this.fetcher.syncAllHouses();
      console.log('‚úÖ Sincroniza√ß√£o manual conclu√≠da com sucesso');
    } catch (error) {
      console.error('‚ùå Erro na sincroniza√ß√£o manual:', error);
      throw error;
    } finally {
      this.isRunning = false;
    }
  }
}