Voc√™ √© um desenvolvedor s√™nior de front-end e back-end, com dom√≠nio em React, Tailwind CSS, TypeScript, Express, PostgreSQL e Drizzle ORM.

## CONTEXTO:
Estou construindo um painel administrativo para meu sistema de afiliados. Na rota /admin/manage, exibo uma tabela com todos os afiliados cadastrados. Cada linha tem tr√™s bot√µes de a√ß√£o: "Ver", "Editar", "Excluir".

## PROBLEMAS ATUAIS:
1. O bot√£o "Ver" n√£o busca dados atualizados do banco e mostra um modal gen√©rico ou repetido.
2. O bot√£o "Editar" leva a uma rota inexistente (/admin/manage/[id]/edit ‚Üí erro 404).
3. O bot√£o "Excluir" n√£o faz nenhuma a√ß√£o ou n√£o confirma antes de deletar.
4. A interface √© funcionalmente fraca e n√£o oferece feedback de sucesso ou erro.
5. A tabela carrega dados inconsistentes (problema de sincroniza√ß√£o com o backend).

## OBJETIVO:
Corrigir e aprimorar todos os tr√™s bot√µes com integra√ß√£o real ao banco, UX moderna e c√≥digo limpo, seguindo boas pr√°ticas.

---

## üîß FUNCIONALIDADES ESPERADAS POR BOT√ÉO:

### 1. üëÅ Bot√£o "Ver":
- Ao clicar, abrir um modal moderno (`shadcn/ui` ou componente customizado).
- O modal busca os dados atualizados do afiliado (`GET /admin/affiliates/:id`) e exibe:
  - Nome completo
  - Usu√°rio
  - E-mail
  - Data de cadastro
  - Comiss√£o acumulada
  - Quantidade de cliques, registros e dep√≥sitos
  - Status (ativo/inativo)
- Modal com bot√£o "Fechar", bem centralizado e com anima√ß√£o suave.

### 2. ‚úèÔ∏è Bot√£o "Editar":
- Redireciona para uma p√°gina real `/admin/manage/[id]/edit` (criar essa p√°gina se n√£o existir).
- A p√°gina cont√©m um formul√°rio com os campos edit√°veis (nome, status, email, etc).
- Ao salvar, envia `PATCH /admin/affiliates/:id` e retorna toast de sucesso.

### 3. üóë Bot√£o "Excluir":
- Abre um dialog de confirma√ß√£o (`Voc√™ tem certeza que deseja excluir o afiliado?`).
- Se confirmado, chama `DELETE /admin/affiliates/:id`.
- Ap√≥s sucesso, atualiza automaticamente a tabela.
- Exibir toast visual de confirma√ß√£o com √≠cone e cor indicativa.

---

## üíª PADRONIZA√á√ÉO T√âCNICA:

### FRONT-END:
- React + Tailwind + TypeScript
- Componentes reutiliz√°veis (`<ActionButtons />`, `<ViewModal />`, `<EditAffiliateForm />`)
- Responsivo e compat√≠vel com dark mode
- Anima√ß√µes suaves (framer-motion ou classes Tailwind)

### BACK-END:
- Node.js + Express + Drizzle ORM
- Rotas protegidas com middleware de admin
- Endpoints:
  - GET `/admin/affiliates/:id`
  - PATCH `/admin/affiliates/:id`
  - DELETE `/admin/affiliates/:id`

### UX/UI:
- Hover e foco acess√≠veis
- √çcones com `aria-label` e tooltips para acessibilidade
- Feedback visual com `toast`, `spinner`, ou `badge`
- Layout limpo, sem polui√ß√£o visual

---

## EXTRA:
- Validar erros com Zod no frontend e backend
- Exibir status de carregamento (`loading...`) enquanto busca dados
- Todos os dados devem vir diretamente do banco (sem cache hardcoded)

---

Com esse prompt, quero que a IA construa uma **experi√™ncia moderna, robusta e funcional para o admin gerenciar afiliados com fluidez, precis√£o e seguran√ßa**. Todo c√≥digo deve ser modular, reutiliz√°vel e elegante.
