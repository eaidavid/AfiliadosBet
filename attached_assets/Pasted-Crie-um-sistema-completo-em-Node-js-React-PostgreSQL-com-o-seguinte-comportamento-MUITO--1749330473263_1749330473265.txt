Crie um sistema completo em Node.js + React + PostgreSQL, com o seguinte comportamento:

‚ö†Ô∏è MUITO IMPORTANTE:
O sistema N√ÉO envia dados para a API da Smartico. Ele APENAS consulta os dados usando requisi√ß√£o GET e salva localmente.  
Qualquer l√≥gica de envio (POST, cria√ß√£o de afiliados, pagamento via API) deve ser ignorada.  
Comece do zero, desconsiderando qualquer implementa√ß√£o anterior que enviava dados.

üß© BACK-END (Node.js + Express):
1. Criar agendador (cron job) que roda a cada 30 minutos e:
   - Consulta a tabela `betting_houses` (casas) com campo `modo_recebimento = 'api'`
   - Usa a coluna `api_key` de cada casa para fazer requisi√ß√£o GET para:
     `https://boapi.smartico.ai/api/af2_media_report_op`
   - Par√¢metros:
     - aggregation_period=DAY
     - group_by=affiliate_id
     - date_from e date_to = hoje
     - Authorization: api_key da casa
2. Para cada item retornado da API:
   - Verifica se existe o afiliado correspondente na tabela `users`
   - Para cada evento detectado:
     - Se `visit_count > 0`, salva evento do tipo `click`
     - Se `registration_count > 0`, evento `registration`
     - Se `deposit_total > 0`, evento `deposit`
     - Se `commissions_total > 0`, evento `profit`
   - Inserir na tabela `conversions`:
     - user_id
     - house_id
     - type (click, registration, deposit, profit)
     - amount (valor bruto do evento)
     - commission (calculada com base na casa: `commission_type` + `commission_value`)
     - converted_at (data do evento)
   - Verificar se j√° existe convers√£o do mesmo tipo/afiliado/casa/dia antes de inserir (para evitar duplica√ß√£o)
3. Criar rota:
   `GET /api/conversions`
   - Filtros opcionais: `date_from`, `date_to`, `user_id`, `house_id`
   - Retorna dados da tabela `conversions` com JOIN nos afiliados (`users`) e casas (`betting_houses`)

üß± BANCO DE DADOS (PostgreSQL):
- Usar estrutura j√° existente:
  - `users`
  - `betting_houses`
  - `conversions`
- Adicionar se necess√°rio:
  - `modo_recebimento` e `api_key` em `betting_houses`

üé® FRONT-END (React + Tailwind ou Bootstrap):
1. Criar p√°gina visual:
   - Filtros por data (`date_from`, `date_to`)
   - Filtro por afiliado (dropdown com nome dos users)
   - Filtro por casa (dropdown com nome das casas)
   - Bot√£o ‚ÄúBuscar dados‚Äù
2. Ao clicar, faz requisi√ß√£o `GET /api/conversions` com os filtros
3. Exibir tabela com colunas:
   - Data (`converted_at`)
   - Nome do afiliado
   - Nome da casa
   - Tipo de evento
   - Valor do evento (`amount`)
   - Comiss√£o gerada
4. Ao final da tabela, mostrar totais:
   - Total de clicks, registros, dep√≥sitos, profit
   - Total geral de comiss√µes

üì¶ ESTRUTURA DO PROJETO:
- `/backend`
  - `server.js`
  - `routes/conversions.js`
  - `services/smarticoFetcher.js` (chama API e salva eventos)
  - `cron/smarticoSync.js`
- `/frontend`
  - `App.jsx` ou `Relatorio.jsx`
  - Usa Axios para buscar dados
  - Tabela com filtros e dados visuais

üîê Seguran√ßa:
- O painel √© s√≥ para visualiza√ß√£o interna (admin), n√£o precisa de login
- Sanitizar filtros para evitar SQL Injection
- Tratar falhas da API Smartico com logs

üéØ Objetivo:
Ver visualmente, via painel, que os dados da API Smartico est√£o sendo coletados e salvos corretamente no sistema.

‚ö†Ô∏è REFOR√áANDO:
- N√ÉO criar rotas ou fun√ß√µes que POSTEM dados na Smartico
- N√ÉO usar a API para registrar afiliados, pagamentos ou links
- SOMENTE consultar via GET, processar e exibir

Gere o projeto completo, com back-end, banco, e front-end, pronto para rodar localmente.
